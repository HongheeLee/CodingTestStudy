'''
    문제설명
        백준 2110 공유기 설치 (이분 탐색 이용)
        N개의 집에 C개의 공유기를 설치하는데 가장 인접한 두 공유기 사이의 최대거리를 구한다.
    해결전략
        이분탐색을 이용하는데 가장 인접한 두 공유기 사이의 거리를 탐색의 대상으로 한다. 
        거리를 정해놓고 거기에 몇 개의 공유기를 설치할 수 있는지 세는 방식이다.
        lt는 최단거리인 1, rt는 최장거리로 양끝인 a[0]-a[n-1]로 시작한다. 
        그 중간값을 인접한 두 공유기 사이의 거리라고 했을 때 몇 개의 공유기를 설치할 수 있는지 Count 함수 만들어서 센다.
        첫번째 집의 좌표를 시작점으로 삼고, 시작점에다가 그 거리를 더한 좌표보다 작은 집들은 무시하고 크거나 같은 집을 만나면 공유기를 설치한다.(개수를 +1하고 ep를 갱신한다)
        설치할 수 있는 공유기의 개수가 목표보다 많거나 같으면 일단 답이 될 수 있으므로 그 거리를 저장하고 lt를 옮겨 더 큰 범위에서 탐색을 계속한다.
        목표보다 적으면 rt를 옮겨 더 작은 범위에서 탐색을 계속한다.
'''
def Count(length):
    cnt = 1
    ep = a[0]
    for i in range(1, n):
        if ep + length <= a[i]:
            cnt += 1
            ep = a[i]
    return cnt
n, m = map(int, input().split())
a = []
for _ in range(n):
    a.append(int(input()))
a.sort()
lt = 1
rt = a[n-1] - a[0]
res = 0
while lt <= rt:
    mid = (lt + rt) // 2
    if Count(mid) >= m:
        lt = mid + 1
        res = mid
    else:
        rt = mid - 1
print(res)
